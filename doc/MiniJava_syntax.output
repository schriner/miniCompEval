Grammar

    0 $accept: program $end

    1 program: main_class class_decl_list
    2        | main_class

    3 main_class: CLASS ID O_BR PUBLIC STATIC VOID MAIN O_PAREN STRING O_SQ C_SQ ID C_PAREN O_BR statement C_BR C_BR

    4 class_decl_list: class_decl_list class_decl
    5                | class_decl

    6 class_decl: CLASS ID O_BR var_decl_list method_decl_list C_BR
    7           | CLASS ID EXTENDS ID O_BR var_decl_list method_decl_list C_BR
    8           | CLASS ID O_BR var_decl_list C_BR
    9           | CLASS ID EXTENDS ID O_BR var_decl_list C_BR
   10           | CLASS ID O_BR method_decl_list C_BR
   11           | CLASS ID EXTENDS ID O_BR method_decl_list C_BR
   12           | CLASS ID O_BR C_BR
   13           | CLASS ID EXTENDS ID O_BR C_BR

   14 var_decl_list: var_decl_list var_decl
   15              | var_decl

   16 var_decl: INT ID SEMI
   17         | BOOL ID SEMI
   18         | ID ID SEMI
   19         | INT type_bracket_list ID SEMI
   20         | BOOL type_bracket_list ID SEMI
   21         | ID type_bracket_list ID SEMI

   22 var_decl_exp_list: var_decl_exp_list var_decl_exp SEMI
   23                  | var_decl_exp_list var_decl
   24                  | var_decl_exp SEMI
   25                  | var_decl

   26 var_decl_exp: INT ID EQUAL full_exp
   27             | BOOL ID EQUAL full_exp
   28             | ID ID EQUAL full_exp
   29             | INT type_bracket_list ID EQUAL NEW prime_type index
   30             | BOOL type_bracket_list ID EQUAL NEW prime_type index
   31             | ID type_bracket_list ID EQUAL NEW prime_type index

   32 type_bracket_list: type_bracket_list O_SQ C_SQ
   33                  | O_SQ C_SQ

   34 method_decl_list: method_decl_list method_decl
   35                 | method_decl

   36 method_decl: PUBLIC type ID O_PAREN formal_list C_PAREN O_BR var_decl_list statement_list RETURN full_exp SEMI C_BR
   37            | PUBLIC type ID O_PAREN C_PAREN O_BR var_decl_list statement_list RETURN full_exp SEMI C_BR
   38            | PUBLIC type ID O_PAREN formal_list C_PAREN O_BR statement_list RETURN full_exp SEMI C_BR
   39            | PUBLIC type ID O_PAREN C_PAREN O_BR statement_list RETURN full_exp SEMI C_BR
   40            | PUBLIC type ID O_PAREN formal_list C_PAREN O_BR var_decl_list RETURN full_exp SEMI C_BR
   41            | PUBLIC type ID O_PAREN C_PAREN O_BR var_decl_list RETURN full_exp SEMI C_BR
   42            | PUBLIC type ID O_PAREN formal_list C_PAREN O_BR RETURN full_exp SEMI C_BR
   43            | PUBLIC type ID O_PAREN C_PAREN O_BR RETURN full_exp SEMI C_BR

   44 formal_list: type ID formal_rest_list
   45            | type ID

   46 formal_rest_list: formal_rest_list formal_rest
   47                 | formal_rest

   48 formal_rest: COMMA type ID

   49 type: prime_type
   50     | type O_SQ C_SQ

   51 prime_type: INT
   52           | BOOL
   53           | ID

   54 statement_list: statement_list statement
   55               | statement

   56 statement: O_BR C_BR
   57          | O_BR statement_list C_BR
   58          | O_BR var_decl_exp_list C_BR
   59          | O_BR var_decl_exp_list statement_list C_BR
   60          | IF O_PAREN full_exp C_PAREN statement ELSE statement
   61          | WHILE O_PAREN full_exp C_PAREN statement
   62          | FOR O_PAREN var_decl_exp SEMI full_exp SEMI ID EQUAL full_exp C_PAREN statement
   63          | PRINT_STATE O_PAREN full_exp C_PAREN SEMI
   64          | PRINT_STATE O_PAREN STRING_LITERAL C_PAREN SEMI
   65          | PRINT_STATE_LN O_PAREN full_exp C_PAREN SEMI
   66          | PRINT_STATE_LN O_PAREN STRING_LITERAL C_PAREN SEMI
   67          | ID EQUAL full_exp SEMI
   68          | ID index EQUAL full_exp SEMI
   69          | RETURN full_exp SEMI

   70 index: O_SQ full_exp C_SQ
   71      | index O_SQ full_exp C_SQ

   72 full_exp: or_term

   73 or_term: and_term
   74        | or_term OR and_term

   75 and_term: eq_term
   76         | and_term AND eq_term

   77 eq_term: gr_le_term
   78        | eq_term EQEQ gr_le_term
   79        | eq_term N_EQ gr_le_term

   80 gr_le_term: add_term
   81           | gr_le_term LESS add_term
   82           | gr_le_term GREAT add_term
   83           | gr_le_term L_EQ add_term
   84           | gr_le_term G_EQ add_term

   85 add_term: mul_term
   86         | add_term PLUS mul_term
   87         | add_term MINUS mul_term

   88 mul_term: un_op
   89         | mul_term DIV un_op
   90         | mul_term MUL un_op

   91 un_op: exp
   92      | NOT un_op
   93      | PLUS un_op
   94      | MINUS un_op

   95 exp: ID
   96    | ID index
   97    | ID DOT LENGTH
   98    | ID index DOT LENGTH
   99    | INTEGER_LITERAL
  100    | TRUE
  101    | FALSE
  102    | object
  103    | ID DOT ID O_PAREN exp_list C_PAREN
  104    | object DOT ID O_PAREN exp_list C_PAREN
  105    | ID DOT ID O_PAREN C_PAREN
  106    | object DOT ID O_PAREN C_PAREN
  107    | O_PAREN full_exp C_PAREN

  108 object: THIS
  109       | NEW ID O_PAREN C_PAREN
  110       | NEW prime_type index

  111 exp_rest_list: exp_rest_list exp_rest
  112              | exp_rest

  113 exp_list: full_exp exp_rest_list
  114         | full_exp

  115 exp_rest: COMMA full_exp


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INTEGER_LITERAL <in_l> (258) 99
    STRING_LITERAL <st_l> (259) 64 66
    ID <id> (260) 3 6 7 8 9 10 11 12 13 16 17 18 19 20 21 26 27 28 29 30 31 36 37 38 39 40 41 42 43 44 45 48 53 62 67 68 95 96 97 98 103 104 105 106 109
    THIS (261) 108
    NEW (262) 29 30 31 109 110
    EXTENDS (263) 7 9 11 13
    RETURN (264) 36 37 38 39 40 41 42 43 69
    LENGTH (265) 97 98
    PRINT_STATE (266) 63 64
    PRINT_STATE_LN (267) 65 66
    IF (268) 60
    ELSE (269) 60
    FOR (270) 62
    WHILE (271) 61
    STRING (272) 3
    CLASS (273) 3 6 7 8 9 10 11 12 13
    MAIN (274) 3
    STATIC (275) 3
    VOID (276) 3
    PUBLIC (277) 3 36 37 38 39 40 41 42 43
    SEMI (278) 16 17 18 19 20 21 22 24 36 37 38 39 40 41 42 43 62 63 64 65 66 67 68 69
    COMMA (279) 48 115
    NOT (280) 92
    PLUS (281) 86 93
    MINUS (282) 87 94
    EQUAL (283) 26 27 28 29 30 31 62 67 68
    TRUE (284) 100
    FALSE (285) 101
    DOT (286) 97 98 103 104 105 106
    O_PAREN (287) 3 36 37 38 39 40 41 42 43 60 61 62 63 64 65 66 103 104 105 106 107 109
    C_PAREN (288) 3 36 37 38 39 40 41 42 43 60 61 62 63 64 65 66 103 104 105 106 107 109
    O_BR (289) 3 6 7 8 9 10 11 12 13 36 37 38 39 40 41 42 43 56 57 58 59
    C_BR (290) 3 6 7 8 9 10 11 12 13 36 37 38 39 40 41 42 43 56 57 58 59
    O_SQ (291) 3 32 33 50 70 71
    C_SQ (292) 3 32 33 50 70 71
    INT (293) 16 19 26 29 51
    BOOL (294) 17 20 27 30 52
    AND (295) 76
    OR (296) 74
    G_EQ (297) 84
    L_EQ (298) 83
    EQEQ (299) 78
    N_EQ (300) 79
    GREAT (301) 82
    LESS (302) 81
    MUL (303) 90
    DIV (304) 89


Nonterminals, with rules where they appear

    $accept (50)
        on left: 0
    program <node> (51)
        on left: 1 2
        on right: 0
    main_class <main> (52)
        on left: 3
        on right: 1 2
    class_decl_list <cdl> (53)
        on left: 4 5
        on right: 1 4
    class_decl <cd> (54)
        on left: 6 7 8 9 10 11 12 13
        on right: 4 5
    var_decl_list <vdl> (55)
        on left: 14 15
        on right: 6 7 8 9 14 36 37 40 41
    var_decl <vd> (56)
        on left: 16 17 18 19 20 21
        on right: 14 15 23 25
    var_decl_exp_list <vdel> (57)
        on left: 22 23 24 25
        on right: 22 23 58 59
    var_decl_exp <vde> (58)
        on left: 26 27 28 29 30 31
        on right: 22 24 62
    type_bracket_list <tp_i> (59)
        on left: 32 33
        on right: 19 20 21 29 30 31 32
    method_decl_list <mdl> (60)
        on left: 34 35
        on right: 6 7 10 11 34
    method_decl <md> (61)
        on left: 36 37 38 39 40 41 42 43
        on right: 34 35
    formal_list <fl> (62)
        on left: 44 45
        on right: 36 38 40 42
    formal_rest_list <frl> (63)
        on left: 46 47
        on right: 44 46
    formal_rest <fr> (64)
        on left: 48
        on right: 46 47
    type <type> (65)
        on left: 49 50
        on right: 36 37 38 39 40 41 42 43 44 45 48 50
    prime_type <prt> (66)
        on left: 51 52 53
        on right: 29 30 31 49 110
    statement_list <sl> (67)
        on left: 54 55
        on right: 36 37 38 39 54 57 59
    statement <s> (68)
        on left: 56 57 58 59 60 61 62 63 64 65 66 67 68 69
        on right: 3 54 55 60 61 62
    index <i> (69)
        on left: 70 71
        on right: 29 30 31 68 71 96 98 110
    full_exp <e> (70)
        on left: 72
        on right: 26 27 28 36 37 38 39 40 41 42 43 60 61 62 63 65 67 68 69 70 71 107 113 114 115
    or_term <e> (71)
        on left: 73 74
        on right: 72 74
    and_term <e> (72)
        on left: 75 76
        on right: 73 74 76
    eq_term <e> (73)
        on left: 77 78 79
        on right: 75 76 78 79
    gr_le_term <e> (74)
        on left: 80 81 82 83 84
        on right: 77 78 79 81 82 83 84
    add_term <e> (75)
        on left: 85 86 87
        on right: 80 81 82 83 84 86 87
    mul_term <e> (76)
        on left: 88 89 90
        on right: 85 86 87 89 90
    un_op <e> (77)
        on left: 91 92 93 94
        on right: 88 89 90 92 93 94
    exp <e> (78)
        on left: 95 96 97 98 99 100 101 102 103 104 105 106 107
        on right: 91
    object <obj> (79)
        on left: 108 109 110
        on right: 102 104 106
    exp_rest_list <erl> (80)
        on left: 111 112
        on right: 111 113
    exp_list <el> (81)
        on left: 113 114
        on right: 103 104
    exp_rest <er> (82)
        on left: 115
        on right: 111 112


State 0

    0 $accept: • program $end

    CLASS  shift, and go to state 1

    program     go to state 2
    main_class  go to state 3


State 1

    3 main_class: CLASS • ID O_BR PUBLIC STATIC VOID MAIN O_PAREN STRING O_SQ C_SQ ID C_PAREN O_BR statement C_BR C_BR

    ID  shift, and go to state 4


State 2

    0 $accept: program • $end

    $end  shift, and go to state 5


State 3

    1 program: main_class • class_decl_list
    2        | main_class •

    CLASS  shift, and go to state 6

    $default  reduce using rule 2 (program)

    class_decl_list  go to state 7
    class_decl       go to state 8


State 4

    3 main_class: CLASS ID • O_BR PUBLIC STATIC VOID MAIN O_PAREN STRING O_SQ C_SQ ID C_PAREN O_BR statement C_BR C_BR

    O_BR  shift, and go to state 9


State 5

    0 $accept: program $end •

    $default  accept


State 6

    6 class_decl: CLASS • ID O_BR var_decl_list method_decl_list C_BR
    7           | CLASS • ID EXTENDS ID O_BR var_decl_list method_decl_list C_BR
    8           | CLASS • ID O_BR var_decl_list C_BR
    9           | CLASS • ID EXTENDS ID O_BR var_decl_list C_BR
   10           | CLASS • ID O_BR method_decl_list C_BR
   11           | CLASS • ID EXTENDS ID O_BR method_decl_list C_BR
   12           | CLASS • ID O_BR C_BR
   13           | CLASS • ID EXTENDS ID O_BR C_BR

    ID  shift, and go to state 10


State 7

    1 program: main_class class_decl_list •
    4 class_decl_list: class_decl_list • class_decl

    CLASS  shift, and go to state 6

    $default  reduce using rule 1 (program)

    class_decl  go to state 11


State 8

    5 class_decl_list: class_decl •

    $default  reduce using rule 5 (class_decl_list)


State 9

    3 main_class: CLASS ID O_BR • PUBLIC STATIC VOID MAIN O_PAREN STRING O_SQ C_SQ ID C_PAREN O_BR statement C_BR C_BR

    PUBLIC  shift, and go to state 12


State 10

    6 class_decl: CLASS ID • O_BR var_decl_list method_decl_list C_BR
    7           | CLASS ID • EXTENDS ID O_BR var_decl_list method_decl_list C_BR
    8           | CLASS ID • O_BR var_decl_list C_BR
    9           | CLASS ID • EXTENDS ID O_BR var_decl_list C_BR
   10           | CLASS ID • O_BR method_decl_list C_BR
   11           | CLASS ID • EXTENDS ID O_BR method_decl_list C_BR
   12           | CLASS ID • O_BR C_BR
   13           | CLASS ID • EXTENDS ID O_BR C_BR

    EXTENDS  shift, and go to state 13
    O_BR     shift, and go to state 14


State 11

    4 class_decl_list: class_decl_list class_decl •

    $default  reduce using rule 4 (class_decl_list)


State 12

    3 main_class: CLASS ID O_BR PUBLIC • STATIC VOID MAIN O_PAREN STRING O_SQ C_SQ ID C_PAREN O_BR statement C_BR C_BR

    STATIC  shift, and go to state 15


State 13

    7 class_decl: CLASS ID EXTENDS • ID O_BR var_decl_list method_decl_list C_BR
    9           | CLASS ID EXTENDS • ID O_BR var_decl_list C_BR
   11           | CLASS ID EXTENDS • ID O_BR method_decl_list C_BR
   13           | CLASS ID EXTENDS • ID O_BR C_BR

    ID  shift, and go to state 16


State 14

    6 class_decl: CLASS ID O_BR • var_decl_list method_decl_list C_BR
    8           | CLASS ID O_BR • var_decl_list C_BR
   10           | CLASS ID O_BR • method_decl_list C_BR
   12           | CLASS ID O_BR • C_BR

    ID      shift, and go to state 17
    PUBLIC  shift, and go to state 18
    C_BR    shift, and go to state 19
    INT     shift, and go to state 20
    BOOL    shift, and go to state 21

    var_decl_list     go to state 22
    var_decl          go to state 23
    method_decl_list  go to state 24
    method_decl       go to state 25


State 15

    3 main_class: CLASS ID O_BR PUBLIC STATIC • VOID MAIN O_PAREN STRING O_SQ C_SQ ID C_PAREN O_BR statement C_BR C_BR

    VOID  shift, and go to state 26


State 16

    7 class_decl: CLASS ID EXTENDS ID • O_BR var_decl_list method_decl_list C_BR
    9           | CLASS ID EXTENDS ID • O_BR var_decl_list C_BR
   11           | CLASS ID EXTENDS ID • O_BR method_decl_list C_BR
   13           | CLASS ID EXTENDS ID • O_BR C_BR

    O_BR  shift, and go to state 27


State 17

   18 var_decl: ID • ID SEMI
   21         | ID • type_bracket_list ID SEMI

    ID    shift, and go to state 28
    O_SQ  shift, and go to state 29

    type_bracket_list  go to state 30


State 18

   36 method_decl: PUBLIC • type ID O_PAREN formal_list C_PAREN O_BR var_decl_list statement_list RETURN full_exp SEMI C_BR
   37            | PUBLIC • type ID O_PAREN C_PAREN O_BR var_decl_list statement_list RETURN full_exp SEMI C_BR
   38            | PUBLIC • type ID O_PAREN formal_list C_PAREN O_BR statement_list RETURN full_exp SEMI C_BR
   39            | PUBLIC • type ID O_PAREN C_PAREN O_BR statement_list RETURN full_exp SEMI C_BR
   40            | PUBLIC • type ID O_PAREN formal_list C_PAREN O_BR var_decl_list RETURN full_exp SEMI C_BR
   41            | PUBLIC • type ID O_PAREN C_PAREN O_BR var_decl_list RETURN full_exp SEMI C_BR
   42            | PUBLIC • type ID O_PAREN formal_list C_PAREN O_BR RETURN full_exp SEMI C_BR
   43            | PUBLIC • type ID O_PAREN C_PAREN O_BR RETURN full_exp SEMI C_BR

    ID    shift, and go to state 31
    INT   shift, and go to state 32
    BOOL  shift, and go to state 33

    type        go to state 34
    prime_type  go to state 35


State 19

   12 class_decl: CLASS ID O_BR C_BR •

    $default  reduce using rule 12 (class_decl)


State 20

   16 var_decl: INT • ID SEMI
   19         | INT • type_bracket_list ID SEMI

    ID    shift, and go to state 36
    O_SQ  shift, and go to state 29

    type_bracket_list  go to state 37


State 21

   17 var_decl: BOOL • ID SEMI
   20         | BOOL • type_bracket_list ID SEMI

    ID    shift, and go to state 38
    O_SQ  shift, and go to state 29

    type_bracket_list  go to state 39


State 22

    6 class_decl: CLASS ID O_BR var_decl_list • method_decl_list C_BR
    8           | CLASS ID O_BR var_decl_list • C_BR
   14 var_decl_list: var_decl_list • var_decl

    ID      shift, and go to state 17
    PUBLIC  shift, and go to state 18
    C_BR    shift, and go to state 40
    INT     shift, and go to state 20
    BOOL    shift, and go to state 21

    var_decl          go to state 41
    method_decl_list  go to state 42
    method_decl       go to state 25


State 23

   15 var_decl_list: var_decl •

    $default  reduce using rule 15 (var_decl_list)


State 24

   10 class_decl: CLASS ID O_BR method_decl_list • C_BR
   34 method_decl_list: method_decl_list • method_decl

    PUBLIC  shift, and go to state 18
    C_BR    shift, and go to state 43

    method_decl  go to state 44


State 25

   35 method_decl_list: method_decl •

    $default  reduce using rule 35 (method_decl_list)


State 26

    3 main_class: CLASS ID O_BR PUBLIC STATIC VOID • MAIN O_PAREN STRING O_SQ C_SQ ID C_PAREN O_BR statement C_BR C_BR

    MAIN  shift, and go to state 45


State 27

    7 class_decl: CLASS ID EXTENDS ID O_BR • var_decl_list method_decl_list C_BR
    9           | CLASS ID EXTENDS ID O_BR • var_decl_list C_BR
   11           | CLASS ID EXTENDS ID O_BR • method_decl_list C_BR
   13           | CLASS ID EXTENDS ID O_BR • C_BR

    ID      shift, and go to state 17
    PUBLIC  shift, and go to state 18
    C_BR    shift, and go to state 46
    INT     shift, and go to state 20
    BOOL    shift, and go to state 21

    var_decl_list     go to state 47
    var_decl          go to state 23
    method_decl_list  go to state 48
    method_decl       go to state 25


State 28

   18 var_decl: ID ID • SEMI

    SEMI  shift, and go to state 49


State 29

   33 type_bracket_list: O_SQ • C_SQ

    C_SQ  shift, and go to state 50


State 30

   21 var_decl: ID type_bracket_list • ID SEMI
   32 type_bracket_list: type_bracket_list • O_SQ C_SQ

    ID    shift, and go to state 51
    O_SQ  shift, and go to state 52


State 31

   53 prime_type: ID •

    $default  reduce using rule 53 (prime_type)


State 32

   51 prime_type: INT •

    $default  reduce using rule 51 (prime_type)


State 33

   52 prime_type: BOOL •

    $default  reduce using rule 52 (prime_type)


State 34

   36 method_decl: PUBLIC type • ID O_PAREN formal_list C_PAREN O_BR var_decl_list statement_list RETURN full_exp SEMI C_BR
   37            | PUBLIC type • ID O_PAREN C_PAREN O_BR var_decl_list statement_list RETURN full_exp SEMI C_BR
   38            | PUBLIC type • ID O_PAREN formal_list C_PAREN O_BR statement_list RETURN full_exp SEMI C_BR
   39            | PUBLIC type • ID O_PAREN C_PAREN O_BR statement_list RETURN full_exp SEMI C_BR
   40            | PUBLIC type • ID O_PAREN formal_list C_PAREN O_BR var_decl_list RETURN full_exp SEMI C_BR
   41            | PUBLIC type • ID O_PAREN C_PAREN O_BR var_decl_list RETURN full_exp SEMI C_BR
   42            | PUBLIC type • ID O_PAREN formal_list C_PAREN O_BR RETURN full_exp SEMI C_BR
   43            | PUBLIC type • ID O_PAREN C_PAREN O_BR RETURN full_exp SEMI C_BR
   50 type: type • O_SQ C_SQ

    ID    shift, and go to state 53
    O_SQ  shift, and go to state 54


State 35

   49 type: prime_type •

    $default  reduce using rule 49 (type)


State 36

   16 var_decl: INT ID • SEMI

    SEMI  shift, and go to state 55


State 37

   19 var_decl: INT type_bracket_list • ID SEMI
   32 type_bracket_list: type_bracket_list • O_SQ C_SQ

    ID    shift, and go to state 56
    O_SQ  shift, and go to state 52


State 38

   17 var_decl: BOOL ID • SEMI

    SEMI  shift, and go to state 57


State 39

   20 var_decl: BOOL type_bracket_list • ID SEMI
   32 type_bracket_list: type_bracket_list • O_SQ C_SQ

    ID    shift, and go to state 58
    O_SQ  shift, and go to state 52


State 40

    8 class_decl: CLASS ID O_BR var_decl_list C_BR •

    $default  reduce using rule 8 (class_decl)


State 41

   14 var_decl_list: var_decl_list var_decl •

    $default  reduce using rule 14 (var_decl_list)


State 42

    6 class_decl: CLASS ID O_BR var_decl_list method_decl_list • C_BR
   34 method_decl_list: method_decl_list • method_decl

    PUBLIC  shift, and go to state 18
    C_BR    shift, and go to state 59

    method_decl  go to state 44


State 43

   10 class_decl: CLASS ID O_BR method_decl_list C_BR •

    $default  reduce using rule 10 (class_decl)


State 44

   34 method_decl_list: method_decl_list method_decl •

    $default  reduce using rule 34 (method_decl_list)


State 45

    3 main_class: CLASS ID O_BR PUBLIC STATIC VOID MAIN • O_PAREN STRING O_SQ C_SQ ID C_PAREN O_BR statement C_BR C_BR

    O_PAREN  shift, and go to state 60


State 46

   13 class_decl: CLASS ID EXTENDS ID O_BR C_BR •

    $default  reduce using rule 13 (class_decl)


State 47

    7 class_decl: CLASS ID EXTENDS ID O_BR var_decl_list • method_decl_list C_BR
    9           | CLASS ID EXTENDS ID O_BR var_decl_list • C_BR
   14 var_decl_list: var_decl_list • var_decl

    ID      shift, and go to state 17
    PUBLIC  shift, and go to state 18
    C_BR    shift, and go to state 61
    INT     shift, and go to state 20
    BOOL    shift, and go to state 21

    var_decl          go to state 41
    method_decl_list  go to state 62
    method_decl       go to state 25


State 48

   11 class_decl: CLASS ID EXTENDS ID O_BR method_decl_list • C_BR
   34 method_decl_list: method_decl_list • method_decl

    PUBLIC  shift, and go to state 18
    C_BR    shift, and go to state 63

    method_decl  go to state 44


State 49

   18 var_decl: ID ID SEMI •

    $default  reduce using rule 18 (var_decl)


State 50

   33 type_bracket_list: O_SQ C_SQ •

    $default  reduce using rule 33 (type_bracket_list)


State 51

   21 var_decl: ID type_bracket_list ID • SEMI

    SEMI  shift, and go to state 64


State 52

   32 type_bracket_list: type_bracket_list O_SQ • C_SQ

    C_SQ  shift, and go to state 65


State 53

   36 method_decl: PUBLIC type ID • O_PAREN formal_list C_PAREN O_BR var_decl_list statement_list RETURN full_exp SEMI C_BR
   37            | PUBLIC type ID • O_PAREN C_PAREN O_BR var_decl_list statement_list RETURN full_exp SEMI C_BR
   38            | PUBLIC type ID • O_PAREN formal_list C_PAREN O_BR statement_list RETURN full_exp SEMI C_BR
   39            | PUBLIC type ID • O_PAREN C_PAREN O_BR statement_list RETURN full_exp SEMI C_BR
   40            | PUBLIC type ID • O_PAREN formal_list C_PAREN O_BR var_decl_list RETURN full_exp SEMI C_BR
   41            | PUBLIC type ID • O_PAREN C_PAREN O_BR var_decl_list RETURN full_exp SEMI C_BR
   42            | PUBLIC type ID • O_PAREN formal_list C_PAREN O_BR RETURN full_exp SEMI C_BR
   43            | PUBLIC type ID • O_PAREN C_PAREN O_BR RETURN full_exp SEMI C_BR

    O_PAREN  shift, and go to state 66


State 54

   50 type: type O_SQ • C_SQ

    C_SQ  shift, and go to state 67


State 55

   16 var_decl: INT ID SEMI •

    $default  reduce using rule 16 (var_decl)


State 56

   19 var_decl: INT type_bracket_list ID • SEMI

    SEMI  shift, and go to state 68


State 57

   17 var_decl: BOOL ID SEMI •

    $default  reduce using rule 17 (var_decl)


State 58

   20 var_decl: BOOL type_bracket_list ID • SEMI

    SEMI  shift, and go to state 69


State 59

    6 class_decl: CLASS ID O_BR var_decl_list method_decl_list C_BR •

    $default  reduce using rule 6 (class_decl)


State 60

    3 main_class: CLASS ID O_BR PUBLIC STATIC VOID MAIN O_PAREN • STRING O_SQ C_SQ ID C_PAREN O_BR statement C_BR C_BR

    STRING  shift, and go to state 70


State 61

    9 class_decl: CLASS ID EXTENDS ID O_BR var_decl_list C_BR •

    $default  reduce using rule 9 (class_decl)


State 62

    7 class_decl: CLASS ID EXTENDS ID O_BR var_decl_list method_decl_list • C_BR
   34 method_decl_list: method_decl_list • method_decl

    PUBLIC  shift, and go to state 18
    C_BR    shift, and go to state 71

    method_decl  go to state 44


State 63

   11 class_decl: CLASS ID EXTENDS ID O_BR method_decl_list C_BR •

    $default  reduce using rule 11 (class_decl)


State 64

   21 var_decl: ID type_bracket_list ID SEMI •

    $default  reduce using rule 21 (var_decl)


State 65

   32 type_bracket_list: type_bracket_list O_SQ C_SQ •

    $default  reduce using rule 32 (type_bracket_list)


State 66

   36 method_decl: PUBLIC type ID O_PAREN • formal_list C_PAREN O_BR var_decl_list statement_list RETURN full_exp SEMI C_BR
   37            | PUBLIC type ID O_PAREN • C_PAREN O_BR var_decl_list statement_list RETURN full_exp SEMI C_BR
   38            | PUBLIC type ID O_PAREN • formal_list C_PAREN O_BR statement_list RETURN full_exp SEMI C_BR
   39            | PUBLIC type ID O_PAREN • C_PAREN O_BR statement_list RETURN full_exp SEMI C_BR
   40            | PUBLIC type ID O_PAREN • formal_list C_PAREN O_BR var_decl_list RETURN full_exp SEMI C_BR
   41            | PUBLIC type ID O_PAREN • C_PAREN O_BR var_decl_list RETURN full_exp SEMI C_BR
   42            | PUBLIC type ID O_PAREN • formal_list C_PAREN O_BR RETURN full_exp SEMI C_BR
   43            | PUBLIC type ID O_PAREN • C_PAREN O_BR RETURN full_exp SEMI C_BR

    ID       shift, and go to state 31
    C_PAREN  shift, and go to state 72
    INT      shift, and go to state 32
    BOOL     shift, and go to state 33

    formal_list  go to state 73
    type         go to state 74
    prime_type   go to state 35


State 67

   50 type: type O_SQ C_SQ •

    $default  reduce using rule 50 (type)


State 68

   19 var_decl: INT type_bracket_list ID SEMI •

    $default  reduce using rule 19 (var_decl)


State 69

   20 var_decl: BOOL type_bracket_list ID SEMI •

    $default  reduce using rule 20 (var_decl)


State 70

    3 main_class: CLASS ID O_BR PUBLIC STATIC VOID MAIN O_PAREN STRING • O_SQ C_SQ ID C_PAREN O_BR statement C_BR C_BR

    O_SQ  shift, and go to state 75


State 71

    7 class_decl: CLASS ID EXTENDS ID O_BR var_decl_list method_decl_list C_BR •

    $default  reduce using rule 7 (class_decl)


State 72

   37 method_decl: PUBLIC type ID O_PAREN C_PAREN • O_BR var_decl_list statement_list RETURN full_exp SEMI C_BR
   39            | PUBLIC type ID O_PAREN C_PAREN • O_BR statement_list RETURN full_exp SEMI C_BR
   41            | PUBLIC type ID O_PAREN C_PAREN • O_BR var_decl_list RETURN full_exp SEMI C_BR
   43            | PUBLIC type ID O_PAREN C_PAREN • O_BR RETURN full_exp SEMI C_BR

    O_BR  shift, and go to state 76


State 73

   36 method_decl: PUBLIC type ID O_PAREN formal_list • C_PAREN O_BR var_decl_list statement_list RETURN full_exp SEMI C_BR
   38            | PUBLIC type ID O_PAREN formal_list • C_PAREN O_BR statement_list RETURN full_exp SEMI C_BR
   40            | PUBLIC type ID O_PAREN formal_list • C_PAREN O_BR var_decl_list RETURN full_exp SEMI C_BR
   42            | PUBLIC type ID O_PAREN formal_list • C_PAREN O_BR RETURN full_exp SEMI C_BR

    C_PAREN  shift, and go to state 77


State 74

   44 formal_list: type • ID formal_rest_list
   45            | type • ID
   50 type: type • O_SQ C_SQ

    ID    shift, and go to state 78
    O_SQ  shift, and go to state 54


State 75

    3 main_class: CLASS ID O_BR PUBLIC STATIC VOID MAIN O_PAREN STRING O_SQ • C_SQ ID C_PAREN O_BR statement C_BR C_BR

    C_SQ  shift, and go to state 79


State 76

   37 method_decl: PUBLIC type ID O_PAREN C_PAREN O_BR • var_decl_list statement_list RETURN full_exp SEMI C_BR
   39            | PUBLIC type ID O_PAREN C_PAREN O_BR • statement_list RETURN full_exp SEMI C_BR
   41            | PUBLIC type ID O_PAREN C_PAREN O_BR • var_decl_list RETURN full_exp SEMI C_BR
   43            | PUBLIC type ID O_PAREN C_PAREN O_BR • RETURN full_exp SEMI C_BR

    ID              shift, and go to state 80
    RETURN          shift, and go to state 81
    PRINT_STATE     shift, and go to state 82
    PRINT_STATE_LN  shift, and go to state 83
    IF              shift, and go to state 84
    FOR             shift, and go to state 85
    WHILE           shift, and go to state 86
    O_BR            shift, and go to state 87
    INT             shift, and go to state 20
    BOOL            shift, and go to state 21

    var_decl_list   go to state 88
    var_decl        go to state 23
    statement_list  go to state 89
    statement       go to state 90


State 77

   36 method_decl: PUBLIC type ID O_PAREN formal_list C_PAREN • O_BR var_decl_list statement_list RETURN full_exp SEMI C_BR
   38            | PUBLIC type ID O_PAREN formal_list C_PAREN • O_BR statement_list RETURN full_exp SEMI C_BR
   40            | PUBLIC type ID O_PAREN formal_list C_PAREN • O_BR var_decl_list RETURN full_exp SEMI C_BR
   42            | PUBLIC type ID O_PAREN formal_list C_PAREN • O_BR RETURN full_exp SEMI C_BR

    O_BR  shift, and go to state 91


State 78

   44 formal_list: type ID • formal_rest_list
   45            | type ID •

    COMMA  shift, and go to state 92

    $default  reduce using rule 45 (formal_list)

    formal_rest_list  go to state 93
    formal_rest       go to state 94


State 79

    3 main_class: CLASS ID O_BR PUBLIC STATIC VOID MAIN O_PAREN STRING O_SQ C_SQ • ID C_PAREN O_BR statement C_BR C_BR

    ID  shift, and go to state 95


State 80

   18 var_decl: ID • ID SEMI
   21         | ID • type_bracket_list ID SEMI
   67 statement: ID • EQUAL full_exp SEMI
   68          | ID • index EQUAL full_exp SEMI

    ID     shift, and go to state 28
    EQUAL  shift, and go to state 96
    O_SQ   shift, and go to state 97

    type_bracket_list  go to state 30
    index              go to state 98


State 81

   43 method_decl: PUBLIC type ID O_PAREN C_PAREN O_BR RETURN • full_exp SEMI C_BR
   69 statement: RETURN • full_exp SEMI

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    full_exp    go to state 109
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 82

   63 statement: PRINT_STATE • O_PAREN full_exp C_PAREN SEMI
   64          | PRINT_STATE • O_PAREN STRING_LITERAL C_PAREN SEMI

    O_PAREN  shift, and go to state 119


State 83

   65 statement: PRINT_STATE_LN • O_PAREN full_exp C_PAREN SEMI
   66          | PRINT_STATE_LN • O_PAREN STRING_LITERAL C_PAREN SEMI

    O_PAREN  shift, and go to state 120


State 84

   60 statement: IF • O_PAREN full_exp C_PAREN statement ELSE statement

    O_PAREN  shift, and go to state 121


State 85

   62 statement: FOR • O_PAREN var_decl_exp SEMI full_exp SEMI ID EQUAL full_exp C_PAREN statement

    O_PAREN  shift, and go to state 122


State 86

   61 statement: WHILE • O_PAREN full_exp C_PAREN statement

    O_PAREN  shift, and go to state 123


State 87

   56 statement: O_BR • C_BR
   57          | O_BR • statement_list C_BR
   58          | O_BR • var_decl_exp_list C_BR
   59          | O_BR • var_decl_exp_list statement_list C_BR

    ID              shift, and go to state 124
    RETURN          shift, and go to state 125
    PRINT_STATE     shift, and go to state 82
    PRINT_STATE_LN  shift, and go to state 83
    IF              shift, and go to state 84
    FOR             shift, and go to state 85
    WHILE           shift, and go to state 86
    O_BR            shift, and go to state 87
    C_BR            shift, and go to state 126
    INT             shift, and go to state 127
    BOOL            shift, and go to state 128

    var_decl           go to state 129
    var_decl_exp_list  go to state 130
    var_decl_exp       go to state 131
    statement_list     go to state 132
    statement          go to state 90


State 88

   14 var_decl_list: var_decl_list • var_decl
   37 method_decl: PUBLIC type ID O_PAREN C_PAREN O_BR var_decl_list • statement_list RETURN full_exp SEMI C_BR
   41            | PUBLIC type ID O_PAREN C_PAREN O_BR var_decl_list • RETURN full_exp SEMI C_BR

    ID              shift, and go to state 80
    RETURN          shift, and go to state 133
    PRINT_STATE     shift, and go to state 82
    PRINT_STATE_LN  shift, and go to state 83
    IF              shift, and go to state 84
    FOR             shift, and go to state 85
    WHILE           shift, and go to state 86
    O_BR            shift, and go to state 87
    INT             shift, and go to state 20
    BOOL            shift, and go to state 21

    var_decl        go to state 41
    statement_list  go to state 134
    statement       go to state 90


State 89

   39 method_decl: PUBLIC type ID O_PAREN C_PAREN O_BR statement_list • RETURN full_exp SEMI C_BR
   54 statement_list: statement_list • statement

    ID              shift, and go to state 135
    RETURN          shift, and go to state 136
    PRINT_STATE     shift, and go to state 82
    PRINT_STATE_LN  shift, and go to state 83
    IF              shift, and go to state 84
    FOR             shift, and go to state 85
    WHILE           shift, and go to state 86
    O_BR            shift, and go to state 87

    statement  go to state 137


State 90

   55 statement_list: statement •

    $default  reduce using rule 55 (statement_list)


State 91

   36 method_decl: PUBLIC type ID O_PAREN formal_list C_PAREN O_BR • var_decl_list statement_list RETURN full_exp SEMI C_BR
   38            | PUBLIC type ID O_PAREN formal_list C_PAREN O_BR • statement_list RETURN full_exp SEMI C_BR
   40            | PUBLIC type ID O_PAREN formal_list C_PAREN O_BR • var_decl_list RETURN full_exp SEMI C_BR
   42            | PUBLIC type ID O_PAREN formal_list C_PAREN O_BR • RETURN full_exp SEMI C_BR

    ID              shift, and go to state 80
    RETURN          shift, and go to state 138
    PRINT_STATE     shift, and go to state 82
    PRINT_STATE_LN  shift, and go to state 83
    IF              shift, and go to state 84
    FOR             shift, and go to state 85
    WHILE           shift, and go to state 86
    O_BR            shift, and go to state 87
    INT             shift, and go to state 20
    BOOL            shift, and go to state 21

    var_decl_list   go to state 139
    var_decl        go to state 23
    statement_list  go to state 140
    statement       go to state 90


State 92

   48 formal_rest: COMMA • type ID

    ID    shift, and go to state 31
    INT   shift, and go to state 32
    BOOL  shift, and go to state 33

    type        go to state 141
    prime_type  go to state 35


State 93

   44 formal_list: type ID formal_rest_list •
   46 formal_rest_list: formal_rest_list • formal_rest

    COMMA  shift, and go to state 92

    $default  reduce using rule 44 (formal_list)

    formal_rest  go to state 142


State 94

   47 formal_rest_list: formal_rest •

    $default  reduce using rule 47 (formal_rest_list)


State 95

    3 main_class: CLASS ID O_BR PUBLIC STATIC VOID MAIN O_PAREN STRING O_SQ C_SQ ID • C_PAREN O_BR statement C_BR C_BR

    C_PAREN  shift, and go to state 143


State 96

   67 statement: ID EQUAL • full_exp SEMI

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    full_exp    go to state 144
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 97

   33 type_bracket_list: O_SQ • C_SQ
   70 index: O_SQ • full_exp C_SQ

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108
    C_SQ             shift, and go to state 50

    full_exp    go to state 145
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 98

   68 statement: ID index • EQUAL full_exp SEMI
   71 index: index • O_SQ full_exp C_SQ

    EQUAL  shift, and go to state 146
    O_SQ   shift, and go to state 147


State 99

   99 exp: INTEGER_LITERAL •

    $default  reduce using rule 99 (exp)


State 100

   95 exp: ID •
   96    | ID • index
   97    | ID • DOT LENGTH
   98    | ID • index DOT LENGTH
  103    | ID • DOT ID O_PAREN exp_list C_PAREN
  105    | ID • DOT ID O_PAREN C_PAREN

    DOT   shift, and go to state 148
    O_SQ  shift, and go to state 149

    $default  reduce using rule 95 (exp)

    index  go to state 150


State 101

  108 object: THIS •

    $default  reduce using rule 108 (object)


State 102

  109 object: NEW • ID O_PAREN C_PAREN
  110       | NEW • prime_type index

    ID    shift, and go to state 151
    INT   shift, and go to state 32
    BOOL  shift, and go to state 33

    prime_type  go to state 152


State 103

   92 un_op: NOT • un_op

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    un_op   go to state 153
    exp     go to state 117
    object  go to state 118


State 104

   93 un_op: PLUS • un_op

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    un_op   go to state 154
    exp     go to state 117
    object  go to state 118


State 105

   94 un_op: MINUS • un_op

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    un_op   go to state 155
    exp     go to state 117
    object  go to state 118


State 106

  100 exp: TRUE •

    $default  reduce using rule 100 (exp)


State 107

  101 exp: FALSE •

    $default  reduce using rule 101 (exp)


State 108

  107 exp: O_PAREN • full_exp C_PAREN

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    full_exp    go to state 156
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 109

   43 method_decl: PUBLIC type ID O_PAREN C_PAREN O_BR RETURN full_exp • SEMI C_BR
   69 statement: RETURN full_exp • SEMI

    SEMI  shift, and go to state 157


State 110

   72 full_exp: or_term •
   74 or_term: or_term • OR and_term

    OR  shift, and go to state 158

    $default  reduce using rule 72 (full_exp)


State 111

   73 or_term: and_term •
   76 and_term: and_term • AND eq_term

    AND  shift, and go to state 159

    $default  reduce using rule 73 (or_term)


State 112

   75 and_term: eq_term •
   78 eq_term: eq_term • EQEQ gr_le_term
   79        | eq_term • N_EQ gr_le_term

    EQEQ  shift, and go to state 160
    N_EQ  shift, and go to state 161

    $default  reduce using rule 75 (and_term)


State 113

   77 eq_term: gr_le_term •
   81 gr_le_term: gr_le_term • LESS add_term
   82           | gr_le_term • GREAT add_term
   83           | gr_le_term • L_EQ add_term
   84           | gr_le_term • G_EQ add_term

    G_EQ   shift, and go to state 162
    L_EQ   shift, and go to state 163
    GREAT  shift, and go to state 164
    LESS   shift, and go to state 165

    $default  reduce using rule 77 (eq_term)


State 114

   80 gr_le_term: add_term •
   86 add_term: add_term • PLUS mul_term
   87         | add_term • MINUS mul_term

    PLUS   shift, and go to state 166
    MINUS  shift, and go to state 167

    $default  reduce using rule 80 (gr_le_term)


State 115

   85 add_term: mul_term •
   89 mul_term: mul_term • DIV un_op
   90         | mul_term • MUL un_op

    MUL  shift, and go to state 168
    DIV  shift, and go to state 169

    $default  reduce using rule 85 (add_term)


State 116

   88 mul_term: un_op •

    $default  reduce using rule 88 (mul_term)


State 117

   91 un_op: exp •

    $default  reduce using rule 91 (un_op)


State 118

  102 exp: object •
  104    | object • DOT ID O_PAREN exp_list C_PAREN
  106    | object • DOT ID O_PAREN C_PAREN

    DOT  shift, and go to state 170

    $default  reduce using rule 102 (exp)


State 119

   63 statement: PRINT_STATE O_PAREN • full_exp C_PAREN SEMI
   64          | PRINT_STATE O_PAREN • STRING_LITERAL C_PAREN SEMI

    INTEGER_LITERAL  shift, and go to state 99
    STRING_LITERAL   shift, and go to state 171
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    full_exp    go to state 172
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 120

   65 statement: PRINT_STATE_LN O_PAREN • full_exp C_PAREN SEMI
   66          | PRINT_STATE_LN O_PAREN • STRING_LITERAL C_PAREN SEMI

    INTEGER_LITERAL  shift, and go to state 99
    STRING_LITERAL   shift, and go to state 173
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    full_exp    go to state 174
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 121

   60 statement: IF O_PAREN • full_exp C_PAREN statement ELSE statement

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    full_exp    go to state 175
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 122

   62 statement: FOR O_PAREN • var_decl_exp SEMI full_exp SEMI ID EQUAL full_exp C_PAREN statement

    ID    shift, and go to state 176
    INT   shift, and go to state 177
    BOOL  shift, and go to state 178

    var_decl_exp  go to state 179


State 123

   61 statement: WHILE O_PAREN • full_exp C_PAREN statement

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    full_exp    go to state 180
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 124

   18 var_decl: ID • ID SEMI
   21         | ID • type_bracket_list ID SEMI
   28 var_decl_exp: ID • ID EQUAL full_exp
   31             | ID • type_bracket_list ID EQUAL NEW prime_type index
   67 statement: ID • EQUAL full_exp SEMI
   68          | ID • index EQUAL full_exp SEMI

    ID     shift, and go to state 181
    EQUAL  shift, and go to state 96
    O_SQ   shift, and go to state 97

    type_bracket_list  go to state 182
    index              go to state 98


State 125

   69 statement: RETURN • full_exp SEMI

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    full_exp    go to state 183
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 126

   56 statement: O_BR C_BR •

    $default  reduce using rule 56 (statement)


State 127

   16 var_decl: INT • ID SEMI
   19         | INT • type_bracket_list ID SEMI
   26 var_decl_exp: INT • ID EQUAL full_exp
   29             | INT • type_bracket_list ID EQUAL NEW prime_type index

    ID    shift, and go to state 184
    O_SQ  shift, and go to state 29

    type_bracket_list  go to state 185


State 128

   17 var_decl: BOOL • ID SEMI
   20         | BOOL • type_bracket_list ID SEMI
   27 var_decl_exp: BOOL • ID EQUAL full_exp
   30             | BOOL • type_bracket_list ID EQUAL NEW prime_type index

    ID    shift, and go to state 186
    O_SQ  shift, and go to state 29

    type_bracket_list  go to state 187


State 129

   25 var_decl_exp_list: var_decl •

    $default  reduce using rule 25 (var_decl_exp_list)


State 130

   22 var_decl_exp_list: var_decl_exp_list • var_decl_exp SEMI
   23                  | var_decl_exp_list • var_decl
   58 statement: O_BR var_decl_exp_list • C_BR
   59          | O_BR var_decl_exp_list • statement_list C_BR

    ID              shift, and go to state 124
    RETURN          shift, and go to state 125
    PRINT_STATE     shift, and go to state 82
    PRINT_STATE_LN  shift, and go to state 83
    IF              shift, and go to state 84
    FOR             shift, and go to state 85
    WHILE           shift, and go to state 86
    O_BR            shift, and go to state 87
    C_BR            shift, and go to state 188
    INT             shift, and go to state 127
    BOOL            shift, and go to state 128

    var_decl        go to state 189
    var_decl_exp    go to state 190
    statement_list  go to state 191
    statement       go to state 90


State 131

   24 var_decl_exp_list: var_decl_exp • SEMI

    SEMI  shift, and go to state 192


State 132

   54 statement_list: statement_list • statement
   57 statement: O_BR statement_list • C_BR

    ID              shift, and go to state 135
    RETURN          shift, and go to state 125
    PRINT_STATE     shift, and go to state 82
    PRINT_STATE_LN  shift, and go to state 83
    IF              shift, and go to state 84
    FOR             shift, and go to state 85
    WHILE           shift, and go to state 86
    O_BR            shift, and go to state 87
    C_BR            shift, and go to state 193

    statement  go to state 137


State 133

   41 method_decl: PUBLIC type ID O_PAREN C_PAREN O_BR var_decl_list RETURN • full_exp SEMI C_BR
   69 statement: RETURN • full_exp SEMI

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    full_exp    go to state 194
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 134

   37 method_decl: PUBLIC type ID O_PAREN C_PAREN O_BR var_decl_list statement_list • RETURN full_exp SEMI C_BR
   54 statement_list: statement_list • statement

    ID              shift, and go to state 135
    RETURN          shift, and go to state 195
    PRINT_STATE     shift, and go to state 82
    PRINT_STATE_LN  shift, and go to state 83
    IF              shift, and go to state 84
    FOR             shift, and go to state 85
    WHILE           shift, and go to state 86
    O_BR            shift, and go to state 87

    statement  go to state 137


State 135

   67 statement: ID • EQUAL full_exp SEMI
   68          | ID • index EQUAL full_exp SEMI

    EQUAL  shift, and go to state 96
    O_SQ   shift, and go to state 149

    index  go to state 98


State 136

   39 method_decl: PUBLIC type ID O_PAREN C_PAREN O_BR statement_list RETURN • full_exp SEMI C_BR
   69 statement: RETURN • full_exp SEMI

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    full_exp    go to state 196
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 137

   54 statement_list: statement_list statement •

    $default  reduce using rule 54 (statement_list)


State 138

   42 method_decl: PUBLIC type ID O_PAREN formal_list C_PAREN O_BR RETURN • full_exp SEMI C_BR
   69 statement: RETURN • full_exp SEMI

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    full_exp    go to state 197
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 139

   14 var_decl_list: var_decl_list • var_decl
   36 method_decl: PUBLIC type ID O_PAREN formal_list C_PAREN O_BR var_decl_list • statement_list RETURN full_exp SEMI C_BR
   40            | PUBLIC type ID O_PAREN formal_list C_PAREN O_BR var_decl_list • RETURN full_exp SEMI C_BR

    ID              shift, and go to state 80
    RETURN          shift, and go to state 198
    PRINT_STATE     shift, and go to state 82
    PRINT_STATE_LN  shift, and go to state 83
    IF              shift, and go to state 84
    FOR             shift, and go to state 85
    WHILE           shift, and go to state 86
    O_BR            shift, and go to state 87
    INT             shift, and go to state 20
    BOOL            shift, and go to state 21

    var_decl        go to state 41
    statement_list  go to state 199
    statement       go to state 90


State 140

   38 method_decl: PUBLIC type ID O_PAREN formal_list C_PAREN O_BR statement_list • RETURN full_exp SEMI C_BR
   54 statement_list: statement_list • statement

    ID              shift, and go to state 135
    RETURN          shift, and go to state 200
    PRINT_STATE     shift, and go to state 82
    PRINT_STATE_LN  shift, and go to state 83
    IF              shift, and go to state 84
    FOR             shift, and go to state 85
    WHILE           shift, and go to state 86
    O_BR            shift, and go to state 87

    statement  go to state 137


State 141

   48 formal_rest: COMMA type • ID
   50 type: type • O_SQ C_SQ

    ID    shift, and go to state 201
    O_SQ  shift, and go to state 54


State 142

   46 formal_rest_list: formal_rest_list formal_rest •

    $default  reduce using rule 46 (formal_rest_list)


State 143

    3 main_class: CLASS ID O_BR PUBLIC STATIC VOID MAIN O_PAREN STRING O_SQ C_SQ ID C_PAREN • O_BR statement C_BR C_BR

    O_BR  shift, and go to state 202


State 144

   67 statement: ID EQUAL full_exp • SEMI

    SEMI  shift, and go to state 203


State 145

   70 index: O_SQ full_exp • C_SQ

    C_SQ  shift, and go to state 204


State 146

   68 statement: ID index EQUAL • full_exp SEMI

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    full_exp    go to state 205
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 147

   71 index: index O_SQ • full_exp C_SQ

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    full_exp    go to state 206
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 148

   97 exp: ID DOT • LENGTH
  103    | ID DOT • ID O_PAREN exp_list C_PAREN
  105    | ID DOT • ID O_PAREN C_PAREN

    ID      shift, and go to state 207
    LENGTH  shift, and go to state 208


State 149

   70 index: O_SQ • full_exp C_SQ

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    full_exp    go to state 145
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 150

   71 index: index • O_SQ full_exp C_SQ
   96 exp: ID index •
   98    | ID index • DOT LENGTH

    DOT   shift, and go to state 209
    O_SQ  shift, and go to state 147

    $default  reduce using rule 96 (exp)


State 151

   53 prime_type: ID •
  109 object: NEW ID • O_PAREN C_PAREN

    O_PAREN  shift, and go to state 210

    $default  reduce using rule 53 (prime_type)


State 152

  110 object: NEW prime_type • index

    O_SQ  shift, and go to state 149

    index  go to state 211


State 153

   92 un_op: NOT un_op •

    $default  reduce using rule 92 (un_op)


State 154

   93 un_op: PLUS un_op •

    $default  reduce using rule 93 (un_op)


State 155

   94 un_op: MINUS un_op •

    $default  reduce using rule 94 (un_op)


State 156

  107 exp: O_PAREN full_exp • C_PAREN

    C_PAREN  shift, and go to state 212


State 157

   43 method_decl: PUBLIC type ID O_PAREN C_PAREN O_BR RETURN full_exp SEMI • C_BR
   69 statement: RETURN full_exp SEMI •

    C_BR  shift, and go to state 213

    $default  reduce using rule 69 (statement)


State 158

   74 or_term: or_term OR • and_term

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    and_term    go to state 214
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 159

   76 and_term: and_term AND • eq_term

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    eq_term     go to state 215
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 160

   78 eq_term: eq_term EQEQ • gr_le_term

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    gr_le_term  go to state 216
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 161

   79 eq_term: eq_term N_EQ • gr_le_term

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    gr_le_term  go to state 217
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 162

   84 gr_le_term: gr_le_term G_EQ • add_term

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    add_term  go to state 218
    mul_term  go to state 115
    un_op     go to state 116
    exp       go to state 117
    object    go to state 118


State 163

   83 gr_le_term: gr_le_term L_EQ • add_term

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    add_term  go to state 219
    mul_term  go to state 115
    un_op     go to state 116
    exp       go to state 117
    object    go to state 118


State 164

   82 gr_le_term: gr_le_term GREAT • add_term

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    add_term  go to state 220
    mul_term  go to state 115
    un_op     go to state 116
    exp       go to state 117
    object    go to state 118


State 165

   81 gr_le_term: gr_le_term LESS • add_term

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    add_term  go to state 221
    mul_term  go to state 115
    un_op     go to state 116
    exp       go to state 117
    object    go to state 118


State 166

   86 add_term: add_term PLUS • mul_term

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    mul_term  go to state 222
    un_op     go to state 116
    exp       go to state 117
    object    go to state 118


State 167

   87 add_term: add_term MINUS • mul_term

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    mul_term  go to state 223
    un_op     go to state 116
    exp       go to state 117
    object    go to state 118


State 168

   90 mul_term: mul_term MUL • un_op

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    un_op   go to state 224
    exp     go to state 117
    object  go to state 118


State 169

   89 mul_term: mul_term DIV • un_op

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    un_op   go to state 225
    exp     go to state 117
    object  go to state 118


State 170

  104 exp: object DOT • ID O_PAREN exp_list C_PAREN
  106    | object DOT • ID O_PAREN C_PAREN

    ID  shift, and go to state 226


State 171

   64 statement: PRINT_STATE O_PAREN STRING_LITERAL • C_PAREN SEMI

    C_PAREN  shift, and go to state 227


State 172

   63 statement: PRINT_STATE O_PAREN full_exp • C_PAREN SEMI

    C_PAREN  shift, and go to state 228


State 173

   66 statement: PRINT_STATE_LN O_PAREN STRING_LITERAL • C_PAREN SEMI

    C_PAREN  shift, and go to state 229


State 174

   65 statement: PRINT_STATE_LN O_PAREN full_exp • C_PAREN SEMI

    C_PAREN  shift, and go to state 230


State 175

   60 statement: IF O_PAREN full_exp • C_PAREN statement ELSE statement

    C_PAREN  shift, and go to state 231


State 176

   28 var_decl_exp: ID • ID EQUAL full_exp
   31             | ID • type_bracket_list ID EQUAL NEW prime_type index

    ID    shift, and go to state 232
    O_SQ  shift, and go to state 29

    type_bracket_list  go to state 233


State 177

   26 var_decl_exp: INT • ID EQUAL full_exp
   29             | INT • type_bracket_list ID EQUAL NEW prime_type index

    ID    shift, and go to state 234
    O_SQ  shift, and go to state 29

    type_bracket_list  go to state 235


State 178

   27 var_decl_exp: BOOL • ID EQUAL full_exp
   30             | BOOL • type_bracket_list ID EQUAL NEW prime_type index

    ID    shift, and go to state 236
    O_SQ  shift, and go to state 29

    type_bracket_list  go to state 237


State 179

   62 statement: FOR O_PAREN var_decl_exp • SEMI full_exp SEMI ID EQUAL full_exp C_PAREN statement

    SEMI  shift, and go to state 238


State 180

   61 statement: WHILE O_PAREN full_exp • C_PAREN statement

    C_PAREN  shift, and go to state 239


State 181

   18 var_decl: ID ID • SEMI
   28 var_decl_exp: ID ID • EQUAL full_exp

    SEMI   shift, and go to state 49
    EQUAL  shift, and go to state 240


State 182

   21 var_decl: ID type_bracket_list • ID SEMI
   31 var_decl_exp: ID type_bracket_list • ID EQUAL NEW prime_type index
   32 type_bracket_list: type_bracket_list • O_SQ C_SQ

    ID    shift, and go to state 241
    O_SQ  shift, and go to state 52


State 183

   69 statement: RETURN full_exp • SEMI

    SEMI  shift, and go to state 242


State 184

   16 var_decl: INT ID • SEMI
   26 var_decl_exp: INT ID • EQUAL full_exp

    SEMI   shift, and go to state 55
    EQUAL  shift, and go to state 243


State 185

   19 var_decl: INT type_bracket_list • ID SEMI
   29 var_decl_exp: INT type_bracket_list • ID EQUAL NEW prime_type index
   32 type_bracket_list: type_bracket_list • O_SQ C_SQ

    ID    shift, and go to state 244
    O_SQ  shift, and go to state 52


State 186

   17 var_decl: BOOL ID • SEMI
   27 var_decl_exp: BOOL ID • EQUAL full_exp

    SEMI   shift, and go to state 57
    EQUAL  shift, and go to state 245


State 187

   20 var_decl: BOOL type_bracket_list • ID SEMI
   30 var_decl_exp: BOOL type_bracket_list • ID EQUAL NEW prime_type index
   32 type_bracket_list: type_bracket_list • O_SQ C_SQ

    ID    shift, and go to state 246
    O_SQ  shift, and go to state 52


State 188

   58 statement: O_BR var_decl_exp_list C_BR •

    $default  reduce using rule 58 (statement)


State 189

   23 var_decl_exp_list: var_decl_exp_list var_decl •

    $default  reduce using rule 23 (var_decl_exp_list)


State 190

   22 var_decl_exp_list: var_decl_exp_list var_decl_exp • SEMI

    SEMI  shift, and go to state 247


State 191

   54 statement_list: statement_list • statement
   59 statement: O_BR var_decl_exp_list statement_list • C_BR

    ID              shift, and go to state 135
    RETURN          shift, and go to state 125
    PRINT_STATE     shift, and go to state 82
    PRINT_STATE_LN  shift, and go to state 83
    IF              shift, and go to state 84
    FOR             shift, and go to state 85
    WHILE           shift, and go to state 86
    O_BR            shift, and go to state 87
    C_BR            shift, and go to state 248

    statement  go to state 137


State 192

   24 var_decl_exp_list: var_decl_exp SEMI •

    $default  reduce using rule 24 (var_decl_exp_list)


State 193

   57 statement: O_BR statement_list C_BR •

    $default  reduce using rule 57 (statement)


State 194

   41 method_decl: PUBLIC type ID O_PAREN C_PAREN O_BR var_decl_list RETURN full_exp • SEMI C_BR
   69 statement: RETURN full_exp • SEMI

    SEMI  shift, and go to state 249


State 195

   37 method_decl: PUBLIC type ID O_PAREN C_PAREN O_BR var_decl_list statement_list RETURN • full_exp SEMI C_BR
   69 statement: RETURN • full_exp SEMI

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    full_exp    go to state 250
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 196

   39 method_decl: PUBLIC type ID O_PAREN C_PAREN O_BR statement_list RETURN full_exp • SEMI C_BR
   69 statement: RETURN full_exp • SEMI

    SEMI  shift, and go to state 251


State 197

   42 method_decl: PUBLIC type ID O_PAREN formal_list C_PAREN O_BR RETURN full_exp • SEMI C_BR
   69 statement: RETURN full_exp • SEMI

    SEMI  shift, and go to state 252


State 198

   40 method_decl: PUBLIC type ID O_PAREN formal_list C_PAREN O_BR var_decl_list RETURN • full_exp SEMI C_BR
   69 statement: RETURN • full_exp SEMI

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    full_exp    go to state 253
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 199

   36 method_decl: PUBLIC type ID O_PAREN formal_list C_PAREN O_BR var_decl_list statement_list • RETURN full_exp SEMI C_BR
   54 statement_list: statement_list • statement

    ID              shift, and go to state 135
    RETURN          shift, and go to state 254
    PRINT_STATE     shift, and go to state 82
    PRINT_STATE_LN  shift, and go to state 83
    IF              shift, and go to state 84
    FOR             shift, and go to state 85
    WHILE           shift, and go to state 86
    O_BR            shift, and go to state 87

    statement  go to state 137


State 200

   38 method_decl: PUBLIC type ID O_PAREN formal_list C_PAREN O_BR statement_list RETURN • full_exp SEMI C_BR
   69 statement: RETURN • full_exp SEMI

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    full_exp    go to state 255
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 201

   48 formal_rest: COMMA type ID •

    $default  reduce using rule 48 (formal_rest)


State 202

    3 main_class: CLASS ID O_BR PUBLIC STATIC VOID MAIN O_PAREN STRING O_SQ C_SQ ID C_PAREN O_BR • statement C_BR C_BR

    ID              shift, and go to state 135
    RETURN          shift, and go to state 125
    PRINT_STATE     shift, and go to state 82
    PRINT_STATE_LN  shift, and go to state 83
    IF              shift, and go to state 84
    FOR             shift, and go to state 85
    WHILE           shift, and go to state 86
    O_BR            shift, and go to state 87

    statement  go to state 256


State 203

   67 statement: ID EQUAL full_exp SEMI •

    $default  reduce using rule 67 (statement)


State 204

   70 index: O_SQ full_exp C_SQ •

    $default  reduce using rule 70 (index)


State 205

   68 statement: ID index EQUAL full_exp • SEMI

    SEMI  shift, and go to state 257


State 206

   71 index: index O_SQ full_exp • C_SQ

    C_SQ  shift, and go to state 258


State 207

  103 exp: ID DOT ID • O_PAREN exp_list C_PAREN
  105    | ID DOT ID • O_PAREN C_PAREN

    O_PAREN  shift, and go to state 259


State 208

   97 exp: ID DOT LENGTH •

    $default  reduce using rule 97 (exp)


State 209

   98 exp: ID index DOT • LENGTH

    LENGTH  shift, and go to state 260


State 210

  109 object: NEW ID O_PAREN • C_PAREN

    C_PAREN  shift, and go to state 261


State 211

   71 index: index • O_SQ full_exp C_SQ
  110 object: NEW prime_type index •

    O_SQ  shift, and go to state 147

    $default  reduce using rule 110 (object)


State 212

  107 exp: O_PAREN full_exp C_PAREN •

    $default  reduce using rule 107 (exp)


State 213

   43 method_decl: PUBLIC type ID O_PAREN C_PAREN O_BR RETURN full_exp SEMI C_BR •

    $default  reduce using rule 43 (method_decl)


State 214

   74 or_term: or_term OR and_term •
   76 and_term: and_term • AND eq_term

    AND  shift, and go to state 159

    $default  reduce using rule 74 (or_term)


State 215

   76 and_term: and_term AND eq_term •
   78 eq_term: eq_term • EQEQ gr_le_term
   79        | eq_term • N_EQ gr_le_term

    EQEQ  shift, and go to state 160
    N_EQ  shift, and go to state 161

    $default  reduce using rule 76 (and_term)


State 216

   78 eq_term: eq_term EQEQ gr_le_term •
   81 gr_le_term: gr_le_term • LESS add_term
   82           | gr_le_term • GREAT add_term
   83           | gr_le_term • L_EQ add_term
   84           | gr_le_term • G_EQ add_term

    G_EQ   shift, and go to state 162
    L_EQ   shift, and go to state 163
    GREAT  shift, and go to state 164
    LESS   shift, and go to state 165

    $default  reduce using rule 78 (eq_term)


State 217

   79 eq_term: eq_term N_EQ gr_le_term •
   81 gr_le_term: gr_le_term • LESS add_term
   82           | gr_le_term • GREAT add_term
   83           | gr_le_term • L_EQ add_term
   84           | gr_le_term • G_EQ add_term

    G_EQ   shift, and go to state 162
    L_EQ   shift, and go to state 163
    GREAT  shift, and go to state 164
    LESS   shift, and go to state 165

    $default  reduce using rule 79 (eq_term)


State 218

   84 gr_le_term: gr_le_term G_EQ add_term •
   86 add_term: add_term • PLUS mul_term
   87         | add_term • MINUS mul_term

    PLUS   shift, and go to state 166
    MINUS  shift, and go to state 167

    $default  reduce using rule 84 (gr_le_term)


State 219

   83 gr_le_term: gr_le_term L_EQ add_term •
   86 add_term: add_term • PLUS mul_term
   87         | add_term • MINUS mul_term

    PLUS   shift, and go to state 166
    MINUS  shift, and go to state 167

    $default  reduce using rule 83 (gr_le_term)


State 220

   82 gr_le_term: gr_le_term GREAT add_term •
   86 add_term: add_term • PLUS mul_term
   87         | add_term • MINUS mul_term

    PLUS   shift, and go to state 166
    MINUS  shift, and go to state 167

    $default  reduce using rule 82 (gr_le_term)


State 221

   81 gr_le_term: gr_le_term LESS add_term •
   86 add_term: add_term • PLUS mul_term
   87         | add_term • MINUS mul_term

    PLUS   shift, and go to state 166
    MINUS  shift, and go to state 167

    $default  reduce using rule 81 (gr_le_term)


State 222

   86 add_term: add_term PLUS mul_term •
   89 mul_term: mul_term • DIV un_op
   90         | mul_term • MUL un_op

    MUL  shift, and go to state 168
    DIV  shift, and go to state 169

    $default  reduce using rule 86 (add_term)


State 223

   87 add_term: add_term MINUS mul_term •
   89 mul_term: mul_term • DIV un_op
   90         | mul_term • MUL un_op

    MUL  shift, and go to state 168
    DIV  shift, and go to state 169

    $default  reduce using rule 87 (add_term)


State 224

   90 mul_term: mul_term MUL un_op •

    $default  reduce using rule 90 (mul_term)


State 225

   89 mul_term: mul_term DIV un_op •

    $default  reduce using rule 89 (mul_term)


State 226

  104 exp: object DOT ID • O_PAREN exp_list C_PAREN
  106    | object DOT ID • O_PAREN C_PAREN

    O_PAREN  shift, and go to state 262


State 227

   64 statement: PRINT_STATE O_PAREN STRING_LITERAL C_PAREN • SEMI

    SEMI  shift, and go to state 263


State 228

   63 statement: PRINT_STATE O_PAREN full_exp C_PAREN • SEMI

    SEMI  shift, and go to state 264


State 229

   66 statement: PRINT_STATE_LN O_PAREN STRING_LITERAL C_PAREN • SEMI

    SEMI  shift, and go to state 265


State 230

   65 statement: PRINT_STATE_LN O_PAREN full_exp C_PAREN • SEMI

    SEMI  shift, and go to state 266


State 231

   60 statement: IF O_PAREN full_exp C_PAREN • statement ELSE statement

    ID              shift, and go to state 135
    RETURN          shift, and go to state 125
    PRINT_STATE     shift, and go to state 82
    PRINT_STATE_LN  shift, and go to state 83
    IF              shift, and go to state 84
    FOR             shift, and go to state 85
    WHILE           shift, and go to state 86
    O_BR            shift, and go to state 87

    statement  go to state 267


State 232

   28 var_decl_exp: ID ID • EQUAL full_exp

    EQUAL  shift, and go to state 240


State 233

   31 var_decl_exp: ID type_bracket_list • ID EQUAL NEW prime_type index
   32 type_bracket_list: type_bracket_list • O_SQ C_SQ

    ID    shift, and go to state 268
    O_SQ  shift, and go to state 52


State 234

   26 var_decl_exp: INT ID • EQUAL full_exp

    EQUAL  shift, and go to state 243


State 235

   29 var_decl_exp: INT type_bracket_list • ID EQUAL NEW prime_type index
   32 type_bracket_list: type_bracket_list • O_SQ C_SQ

    ID    shift, and go to state 269
    O_SQ  shift, and go to state 52


State 236

   27 var_decl_exp: BOOL ID • EQUAL full_exp

    EQUAL  shift, and go to state 245


State 237

   30 var_decl_exp: BOOL type_bracket_list • ID EQUAL NEW prime_type index
   32 type_bracket_list: type_bracket_list • O_SQ C_SQ

    ID    shift, and go to state 270
    O_SQ  shift, and go to state 52


State 238

   62 statement: FOR O_PAREN var_decl_exp SEMI • full_exp SEMI ID EQUAL full_exp C_PAREN statement

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    full_exp    go to state 271
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 239

   61 statement: WHILE O_PAREN full_exp C_PAREN • statement

    ID              shift, and go to state 135
    RETURN          shift, and go to state 125
    PRINT_STATE     shift, and go to state 82
    PRINT_STATE_LN  shift, and go to state 83
    IF              shift, and go to state 84
    FOR             shift, and go to state 85
    WHILE           shift, and go to state 86
    O_BR            shift, and go to state 87

    statement  go to state 272


State 240

   28 var_decl_exp: ID ID EQUAL • full_exp

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    full_exp    go to state 273
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 241

   21 var_decl: ID type_bracket_list ID • SEMI
   31 var_decl_exp: ID type_bracket_list ID • EQUAL NEW prime_type index

    SEMI   shift, and go to state 64
    EQUAL  shift, and go to state 274


State 242

   69 statement: RETURN full_exp SEMI •

    $default  reduce using rule 69 (statement)


State 243

   26 var_decl_exp: INT ID EQUAL • full_exp

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    full_exp    go to state 275
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 244

   19 var_decl: INT type_bracket_list ID • SEMI
   29 var_decl_exp: INT type_bracket_list ID • EQUAL NEW prime_type index

    SEMI   shift, and go to state 68
    EQUAL  shift, and go to state 276


State 245

   27 var_decl_exp: BOOL ID EQUAL • full_exp

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    full_exp    go to state 277
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 246

   20 var_decl: BOOL type_bracket_list ID • SEMI
   30 var_decl_exp: BOOL type_bracket_list ID • EQUAL NEW prime_type index

    SEMI   shift, and go to state 69
    EQUAL  shift, and go to state 278


State 247

   22 var_decl_exp_list: var_decl_exp_list var_decl_exp SEMI •

    $default  reduce using rule 22 (var_decl_exp_list)


State 248

   59 statement: O_BR var_decl_exp_list statement_list C_BR •

    $default  reduce using rule 59 (statement)


State 249

   41 method_decl: PUBLIC type ID O_PAREN C_PAREN O_BR var_decl_list RETURN full_exp SEMI • C_BR
   69 statement: RETURN full_exp SEMI •

    C_BR  shift, and go to state 279

    $default  reduce using rule 69 (statement)


State 250

   37 method_decl: PUBLIC type ID O_PAREN C_PAREN O_BR var_decl_list statement_list RETURN full_exp • SEMI C_BR
   69 statement: RETURN full_exp • SEMI

    SEMI  shift, and go to state 280


State 251

   39 method_decl: PUBLIC type ID O_PAREN C_PAREN O_BR statement_list RETURN full_exp SEMI • C_BR
   69 statement: RETURN full_exp SEMI •

    C_BR  shift, and go to state 281

    $default  reduce using rule 69 (statement)


State 252

   42 method_decl: PUBLIC type ID O_PAREN formal_list C_PAREN O_BR RETURN full_exp SEMI • C_BR
   69 statement: RETURN full_exp SEMI •

    C_BR  shift, and go to state 282

    $default  reduce using rule 69 (statement)


State 253

   40 method_decl: PUBLIC type ID O_PAREN formal_list C_PAREN O_BR var_decl_list RETURN full_exp • SEMI C_BR
   69 statement: RETURN full_exp • SEMI

    SEMI  shift, and go to state 283


State 254

   36 method_decl: PUBLIC type ID O_PAREN formal_list C_PAREN O_BR var_decl_list statement_list RETURN • full_exp SEMI C_BR
   69 statement: RETURN • full_exp SEMI

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    full_exp    go to state 284
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 255

   38 method_decl: PUBLIC type ID O_PAREN formal_list C_PAREN O_BR statement_list RETURN full_exp • SEMI C_BR
   69 statement: RETURN full_exp • SEMI

    SEMI  shift, and go to state 285


State 256

    3 main_class: CLASS ID O_BR PUBLIC STATIC VOID MAIN O_PAREN STRING O_SQ C_SQ ID C_PAREN O_BR statement • C_BR C_BR

    C_BR  shift, and go to state 286


State 257

   68 statement: ID index EQUAL full_exp SEMI •

    $default  reduce using rule 68 (statement)


State 258

   71 index: index O_SQ full_exp C_SQ •

    $default  reduce using rule 71 (index)


State 259

  103 exp: ID DOT ID O_PAREN • exp_list C_PAREN
  105    | ID DOT ID O_PAREN • C_PAREN

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108
    C_PAREN          shift, and go to state 287

    full_exp    go to state 288
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118
    exp_list    go to state 289


State 260

   98 exp: ID index DOT LENGTH •

    $default  reduce using rule 98 (exp)


State 261

  109 object: NEW ID O_PAREN C_PAREN •

    $default  reduce using rule 109 (object)


State 262

  104 exp: object DOT ID O_PAREN • exp_list C_PAREN
  106    | object DOT ID O_PAREN • C_PAREN

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108
    C_PAREN          shift, and go to state 290

    full_exp    go to state 288
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118
    exp_list    go to state 291


State 263

   64 statement: PRINT_STATE O_PAREN STRING_LITERAL C_PAREN SEMI •

    $default  reduce using rule 64 (statement)


State 264

   63 statement: PRINT_STATE O_PAREN full_exp C_PAREN SEMI •

    $default  reduce using rule 63 (statement)


State 265

   66 statement: PRINT_STATE_LN O_PAREN STRING_LITERAL C_PAREN SEMI •

    $default  reduce using rule 66 (statement)


State 266

   65 statement: PRINT_STATE_LN O_PAREN full_exp C_PAREN SEMI •

    $default  reduce using rule 65 (statement)


State 267

   60 statement: IF O_PAREN full_exp C_PAREN statement • ELSE statement

    ELSE  shift, and go to state 292


State 268

   31 var_decl_exp: ID type_bracket_list ID • EQUAL NEW prime_type index

    EQUAL  shift, and go to state 274


State 269

   29 var_decl_exp: INT type_bracket_list ID • EQUAL NEW prime_type index

    EQUAL  shift, and go to state 276


State 270

   30 var_decl_exp: BOOL type_bracket_list ID • EQUAL NEW prime_type index

    EQUAL  shift, and go to state 278


State 271

   62 statement: FOR O_PAREN var_decl_exp SEMI full_exp • SEMI ID EQUAL full_exp C_PAREN statement

    SEMI  shift, and go to state 293


State 272

   61 statement: WHILE O_PAREN full_exp C_PAREN statement •

    $default  reduce using rule 61 (statement)


State 273

   28 var_decl_exp: ID ID EQUAL full_exp •

    $default  reduce using rule 28 (var_decl_exp)


State 274

   31 var_decl_exp: ID type_bracket_list ID EQUAL • NEW prime_type index

    NEW  shift, and go to state 294


State 275

   26 var_decl_exp: INT ID EQUAL full_exp •

    $default  reduce using rule 26 (var_decl_exp)


State 276

   29 var_decl_exp: INT type_bracket_list ID EQUAL • NEW prime_type index

    NEW  shift, and go to state 295


State 277

   27 var_decl_exp: BOOL ID EQUAL full_exp •

    $default  reduce using rule 27 (var_decl_exp)


State 278

   30 var_decl_exp: BOOL type_bracket_list ID EQUAL • NEW prime_type index

    NEW  shift, and go to state 296


State 279

   41 method_decl: PUBLIC type ID O_PAREN C_PAREN O_BR var_decl_list RETURN full_exp SEMI C_BR •

    $default  reduce using rule 41 (method_decl)


State 280

   37 method_decl: PUBLIC type ID O_PAREN C_PAREN O_BR var_decl_list statement_list RETURN full_exp SEMI • C_BR
   69 statement: RETURN full_exp SEMI •

    C_BR  shift, and go to state 297

    $default  reduce using rule 69 (statement)


State 281

   39 method_decl: PUBLIC type ID O_PAREN C_PAREN O_BR statement_list RETURN full_exp SEMI C_BR •

    $default  reduce using rule 39 (method_decl)


State 282

   42 method_decl: PUBLIC type ID O_PAREN formal_list C_PAREN O_BR RETURN full_exp SEMI C_BR •

    $default  reduce using rule 42 (method_decl)


State 283

   40 method_decl: PUBLIC type ID O_PAREN formal_list C_PAREN O_BR var_decl_list RETURN full_exp SEMI • C_BR
   69 statement: RETURN full_exp SEMI •

    C_BR  shift, and go to state 298

    $default  reduce using rule 69 (statement)


State 284

   36 method_decl: PUBLIC type ID O_PAREN formal_list C_PAREN O_BR var_decl_list statement_list RETURN full_exp • SEMI C_BR
   69 statement: RETURN full_exp • SEMI

    SEMI  shift, and go to state 299


State 285

   38 method_decl: PUBLIC type ID O_PAREN formal_list C_PAREN O_BR statement_list RETURN full_exp SEMI • C_BR
   69 statement: RETURN full_exp SEMI •

    C_BR  shift, and go to state 300

    $default  reduce using rule 69 (statement)


State 286

    3 main_class: CLASS ID O_BR PUBLIC STATIC VOID MAIN O_PAREN STRING O_SQ C_SQ ID C_PAREN O_BR statement C_BR • C_BR

    C_BR  shift, and go to state 301


State 287

  105 exp: ID DOT ID O_PAREN C_PAREN •

    $default  reduce using rule 105 (exp)


State 288

  113 exp_list: full_exp • exp_rest_list
  114         | full_exp •

    COMMA  shift, and go to state 302

    $default  reduce using rule 114 (exp_list)

    exp_rest_list  go to state 303
    exp_rest       go to state 304


State 289

  103 exp: ID DOT ID O_PAREN exp_list • C_PAREN

    C_PAREN  shift, and go to state 305


State 290

  106 exp: object DOT ID O_PAREN C_PAREN •

    $default  reduce using rule 106 (exp)


State 291

  104 exp: object DOT ID O_PAREN exp_list • C_PAREN

    C_PAREN  shift, and go to state 306


State 292

   60 statement: IF O_PAREN full_exp C_PAREN statement ELSE • statement

    ID              shift, and go to state 135
    RETURN          shift, and go to state 125
    PRINT_STATE     shift, and go to state 82
    PRINT_STATE_LN  shift, and go to state 83
    IF              shift, and go to state 84
    FOR             shift, and go to state 85
    WHILE           shift, and go to state 86
    O_BR            shift, and go to state 87

    statement  go to state 307


State 293

   62 statement: FOR O_PAREN var_decl_exp SEMI full_exp SEMI • ID EQUAL full_exp C_PAREN statement

    ID  shift, and go to state 308


State 294

   31 var_decl_exp: ID type_bracket_list ID EQUAL NEW • prime_type index

    ID    shift, and go to state 31
    INT   shift, and go to state 32
    BOOL  shift, and go to state 33

    prime_type  go to state 309


State 295

   29 var_decl_exp: INT type_bracket_list ID EQUAL NEW • prime_type index

    ID    shift, and go to state 31
    INT   shift, and go to state 32
    BOOL  shift, and go to state 33

    prime_type  go to state 310


State 296

   30 var_decl_exp: BOOL type_bracket_list ID EQUAL NEW • prime_type index

    ID    shift, and go to state 31
    INT   shift, and go to state 32
    BOOL  shift, and go to state 33

    prime_type  go to state 311


State 297

   37 method_decl: PUBLIC type ID O_PAREN C_PAREN O_BR var_decl_list statement_list RETURN full_exp SEMI C_BR •

    $default  reduce using rule 37 (method_decl)


State 298

   40 method_decl: PUBLIC type ID O_PAREN formal_list C_PAREN O_BR var_decl_list RETURN full_exp SEMI C_BR •

    $default  reduce using rule 40 (method_decl)


State 299

   36 method_decl: PUBLIC type ID O_PAREN formal_list C_PAREN O_BR var_decl_list statement_list RETURN full_exp SEMI • C_BR
   69 statement: RETURN full_exp SEMI •

    C_BR  shift, and go to state 312

    $default  reduce using rule 69 (statement)


State 300

   38 method_decl: PUBLIC type ID O_PAREN formal_list C_PAREN O_BR statement_list RETURN full_exp SEMI C_BR •

    $default  reduce using rule 38 (method_decl)


State 301

    3 main_class: CLASS ID O_BR PUBLIC STATIC VOID MAIN O_PAREN STRING O_SQ C_SQ ID C_PAREN O_BR statement C_BR C_BR •

    $default  reduce using rule 3 (main_class)


State 302

  115 exp_rest: COMMA • full_exp

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    full_exp    go to state 313
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 303

  111 exp_rest_list: exp_rest_list • exp_rest
  113 exp_list: full_exp exp_rest_list •

    COMMA  shift, and go to state 302

    $default  reduce using rule 113 (exp_list)

    exp_rest  go to state 314


State 304

  112 exp_rest_list: exp_rest •

    $default  reduce using rule 112 (exp_rest_list)


State 305

  103 exp: ID DOT ID O_PAREN exp_list C_PAREN •

    $default  reduce using rule 103 (exp)


State 306

  104 exp: object DOT ID O_PAREN exp_list C_PAREN •

    $default  reduce using rule 104 (exp)


State 307

   60 statement: IF O_PAREN full_exp C_PAREN statement ELSE statement •

    $default  reduce using rule 60 (statement)


State 308

   62 statement: FOR O_PAREN var_decl_exp SEMI full_exp SEMI ID • EQUAL full_exp C_PAREN statement

    EQUAL  shift, and go to state 315


State 309

   31 var_decl_exp: ID type_bracket_list ID EQUAL NEW prime_type • index

    O_SQ  shift, and go to state 149

    index  go to state 316


State 310

   29 var_decl_exp: INT type_bracket_list ID EQUAL NEW prime_type • index

    O_SQ  shift, and go to state 149

    index  go to state 317


State 311

   30 var_decl_exp: BOOL type_bracket_list ID EQUAL NEW prime_type • index

    O_SQ  shift, and go to state 149

    index  go to state 318


State 312

   36 method_decl: PUBLIC type ID O_PAREN formal_list C_PAREN O_BR var_decl_list statement_list RETURN full_exp SEMI C_BR •

    $default  reduce using rule 36 (method_decl)


State 313

  115 exp_rest: COMMA full_exp •

    $default  reduce using rule 115 (exp_rest)


State 314

  111 exp_rest_list: exp_rest_list exp_rest •

    $default  reduce using rule 111 (exp_rest_list)


State 315

   62 statement: FOR O_PAREN var_decl_exp SEMI full_exp SEMI ID EQUAL • full_exp C_PAREN statement

    INTEGER_LITERAL  shift, and go to state 99
    ID               shift, and go to state 100
    THIS             shift, and go to state 101
    NEW              shift, and go to state 102
    NOT              shift, and go to state 103
    PLUS             shift, and go to state 104
    MINUS            shift, and go to state 105
    TRUE             shift, and go to state 106
    FALSE            shift, and go to state 107
    O_PAREN          shift, and go to state 108

    full_exp    go to state 319
    or_term     go to state 110
    and_term    go to state 111
    eq_term     go to state 112
    gr_le_term  go to state 113
    add_term    go to state 114
    mul_term    go to state 115
    un_op       go to state 116
    exp         go to state 117
    object      go to state 118


State 316

   31 var_decl_exp: ID type_bracket_list ID EQUAL NEW prime_type index •
   71 index: index • O_SQ full_exp C_SQ

    O_SQ  shift, and go to state 147

    $default  reduce using rule 31 (var_decl_exp)


State 317

   29 var_decl_exp: INT type_bracket_list ID EQUAL NEW prime_type index •
   71 index: index • O_SQ full_exp C_SQ

    O_SQ  shift, and go to state 147

    $default  reduce using rule 29 (var_decl_exp)


State 318

   30 var_decl_exp: BOOL type_bracket_list ID EQUAL NEW prime_type index •
   71 index: index • O_SQ full_exp C_SQ

    O_SQ  shift, and go to state 147

    $default  reduce using rule 30 (var_decl_exp)


State 319

   62 statement: FOR O_PAREN var_decl_exp SEMI full_exp SEMI ID EQUAL full_exp • C_PAREN statement

    C_PAREN  shift, and go to state 320


State 320

   62 statement: FOR O_PAREN var_decl_exp SEMI full_exp SEMI ID EQUAL full_exp C_PAREN • statement

    ID              shift, and go to state 135
    RETURN          shift, and go to state 125
    PRINT_STATE     shift, and go to state 82
    PRINT_STATE_LN  shift, and go to state 83
    IF              shift, and go to state 84
    FOR             shift, and go to state 85
    WHILE           shift, and go to state 86
    O_BR            shift, and go to state 87

    statement  go to state 321


State 321

   62 statement: FOR O_PAREN var_decl_exp SEMI full_exp SEMI ID EQUAL full_exp C_PAREN statement •

    $default  reduce using rule 62 (statement)
