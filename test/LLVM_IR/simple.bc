; ModuleID = 'simple'
source_filename = "simple"

@0 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@2 = private unnamed_addr constant [54 x i8] c"This line should be printed. A bunch of expressions:\0A\00", align 1
@3 = private unnamed_addr constant [33 x i8] c"This line should not be printed\0A\00", align 1

define i32 @main() {
EntryBlock:
  %0 = icmp slt i32 2, 3
  %1 = and i1 true, %0
  br i1 %1, label %if, label %el

if:                                               ; preds = %EntryBlock
  %printf = call i32 (ptr, ...) @printf(ptr @2)
  %printf1 = call i32 (ptr, ...) @printf(ptr @1, i32 5)
  %2 = add i32 3, 4
  %3 = add i32 %2, 5
  %4 = add i32 %3, 35
  %printf2 = call i32 (ptr, ...) @printf(ptr @1, i32 %4)
  %5 = sub i32 32, 70
  %6 = sub i32 %5, 2
  %7 = add i32 %6, 9
  %printf3 = call i32 (ptr, ...) @printf(ptr @1, i32 %7)
  %8 = add i32 5, 3
  %9 = mul i32 %8, 17
  %printf4 = call i32 (ptr, ...) @printf(ptr @1, i32 %9)
  br label %s

el:                                               ; preds = %EntryBlock
  %printf5 = call i32 (ptr, ...) @printf(ptr @3)
  br label %s

s:                                                ; preds = %el, %if
  ret i32 0
}

declare i32 @printf(ptr %0, ...)
