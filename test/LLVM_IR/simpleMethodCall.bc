; ModuleID = 'simpleMethodCall'
source_filename = "simpleMethodCall"

@0 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@2 = private unnamed_addr constant [17 x i8] c"Function Called\0A\00", align 1
@3 = private unnamed_addr constant [9 x i8] c"Huzzah!\0A\00", align 1
@4 = private unnamed_addr constant [19 x i8] c"Calling a method:\0A\00", align 1
@5 = private unnamed_addr constant [33 x i8] c"This line should not be printed\0A\00", align 1

declare i32 @printf(ptr %0, ...)

define i32 @dummyFunctionfunction(ptr %0) {
EntryBlock:
  %1 = alloca i32, align 4
  store ptr %0, ptr %1, align 8
  %2 = call i32 (ptr, ...) @printf(ptr @1, i32 49)
  %3 = call i32 (ptr, ...) @printf(ptr @2)
  %4 = call i32 (ptr, ...) @printf(ptr @3)
  %5 = mul i32 9, 9
  %6 = mul i32 1, %5
  %7 = mul i32 %6, 2
  %8 = mul i32 %7, 67
  %9 = mul i32 10, 2
  %10 = add i32 %8, %9
  %11 = sub i32 %10, 39
  %12 = mul i32 10, 8
  %13 = add i32 %11, %12
  ret i32 %13
}

define i32 @main() {
EntryBlock:
  %0 = icmp slt i32 2, 3
  %1 = and i1 true, %0
  br i1 %1, label %if, label %el

if:                                               ; preds = %EntryBlock
  %2 = call i32 (ptr, ...) @printf(ptr @4)
  %3 = call i32 @dummyFunctionfunction(i32 0)
  %4 = call i32 (ptr, ...) @printf(ptr @1, i32 %3)
  br label %s

el:                                               ; preds = %EntryBlock
  %5 = call i32 (ptr, ...) @printf(ptr @5)
  br label %s

s:                                                ; preds = %if, %el
  ret i32 0
}
